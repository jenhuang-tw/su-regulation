name: 同步法規檔案與更新清單

on:
  # 允許在 GitHub 上手動觸發
  workflow_dispatch:
  
  schedule:
    # 設定排程：每天 UTC 4:00 (相當於 UTC+8 臺北時間中午 12:00) 執行
    - cron: '0 4 * * *'

jobs:
  sync-and-update:
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. 取得現行程式碼
        uses: actions/checkout@v4
        with:
          # 設定 fetch depth 為0以便在稍後 git pull
          fetch-depth: 0

      - name: 2. 設定 Python 環境
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 3. 設定 Node.js 環境
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 4. 安裝 Python 相依套件
        run: pip install gdown

      - name: 5. 安裝 Node.js 相依套件
        run: npm ci

      - name: 6. 從 Google Drive 同步法規檔案
        run: |
          echo "Creating temporary download directory..."
          mkdir temp_drive_download
          
          echo "Downloading from Google Drive (法規上傳區共用資料夾)..."
          gdown --folder 12pfhU4BD47k58wGX4Tn1iz1whfIlt7D4 -O ./temp_drive_download/
          
          echo "Cleaning old regulations directory..."
          rm -rf ./public/regulations
          mkdir -p ./public/regulations
          
          echo "Moving and flattening all .txt files..."
          # 將臨時資料夾中所有檔案移動
          find ./temp_drive_download -name "*.txt" -exec mv {} ./public/regulations/ \;
          
          echo "Cleaning up temporary directory..."
          rm -rf temp_drive_download

      - name: 7. 更新法規檔案、Commit, Push
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions-bot@users.noreply.github.com"
          git config --global core.autocrlf false
          
          # 檢查是否有 .txt 檔案變動
          # 我們只關心 public/regulations 是否有變動
          if [ -n "$(git status --porcelain ./public/regulations/)" ]; then
            echo "偵測到法規檔案變動，開始執行列表更新..."
            
            # 執行 update-regulation-list.js
            node update-regulation-list.js
            
            echo "將所有變更（.txt 和 index.vue）加入 Staging..."
            # 將下載的 .txt 檔案變更加到 commit
            git add ./public/regulations/
            # 將更新後的 index.vue 變更加到 commit
            git add pages/regulation/index.vue
            
            # 檢查是否有任何檔案（.txt 或 index.vue）被 staged
            # ! git diff --staged --quiet 會在有 staged 變更時回傳 true
            if ! git diff --staged --quiet; then
              echo "發現 Staged 變更，準備 commit..."
              git commit -m "chore(law): 同步法規檔案"
              
              echo "Pulling remote changes before push..."
              # 使用 git pull --rebase 來同步遠端變更，解決 [rejected] 錯誤
              git pull --rebase
              
              echo "Pushing changes to remote..."
              git push
            else
              echo "法規檔案內容雖有變動，但清單（僅有編號與簡稱）無需更新。"
            fi
            
          else
            echo "Google Drive 上沒有異動。"
          fi